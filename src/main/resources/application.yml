micronaut:
    security:
        # セキュリティ機能を有効化
        enabled: true
        token:
            basic-auth:
                # Basic 認証用の処理を無効にする（デフォルトで有効となっている）
                enabled: false
        intercept-url-map:
            -   pattern: /favicon.ico
                http-method: GET
                access:
                    - isAnonymous()
            -   pattern: /auth/**
                access:
                    - isAuthenticated()
                    # カスタムロールを指定できる
                    - CUSTOM_ROLE_1
            -   pattern: /totp/**
                access:
                    - isAuthenticated()
            -   pattern: /**
                access:
                    - isAnonymous()
#        endpoints:
#            login:
#                enabled: true
#                path: /login
#            logout:
#                enabled: true
#                path: /logout

    application:
        name: micronaut-kotlin-coroutine-sample
    caches:
        user:
            # 値のシリアライズとデシリアライズに使用される文字セット
            charset: UTF-8
            # 初期キャッシュ容量
            initial-capacity: 0
            # 最大キャッシュ登録数
            #maximumSize: 100
            # 登録の最大の重み
            maximum-weight: 100
            # 書き込み後のキャッシュの有効期限（書式はここを参照 [https://docs.oracle.com/javase/jp/8/docs/api/java/time/Duration.html#parse-java.lang.CharSequence-]）
            expire-after-write: "PT15M"
            # アクセス後のキャッシュの有効期限
            expire-after-access: "PT15M"
            # レコード統計を有効化
            record-stats: true
            # テストモードを有効化
            test-mode: true
        other-user:
            #maximumSize: 100
            record-stats: true
            test-mode: true

# Jackson の設定（XML 変換も対象となる）
jackson:
    # Jackson に Micronaut の Bean Introspection を利用させる設定
    bean-introspection-module: true
    serialization:
        # インデント付きで出力
        indentOutput: true
        writeDatesAsTimestamps: false
    deserialization:
        useBigIntegerForInts: true
        failOnUnknownProperties: false

# endpoints を利用するには、build.gradle に「implementation "io.micronaut:micronaut-management"」が必要
endpoints:
    caches:
        enabled: true
        # データ表示に認証が必要かどうか
        sensitive: false

# Retry Advice の設定値
retry:
    test:
        attempts: "4"
        delay: "200ms"

# スケジュールタスクの設定値
schedule:
    conf:
        fixed: "1m"

# プロパティ値の取得・設定方法
custom-vals:
    # 環境変数で上書きする場合は、CUST_SAMPLE1=env_value の様に設定する
    # システムプロパティで上書きする場合は、-Dcust.sample1=cli_value の様に設定する
    # 実際に試す場合は、build.gradle の tasks.withType(JavaExec) 定義中にある、
    # jvmArgs または、environment に追記すること。
    sample-value1: ${cust.sample1:`application_yml_1`}
    # コロンを取り除いた場合、必ず環境変数やプロパティなどで、値を設定しないと参照時点でエラーとなる。
    sampleValue2: ${cust.sample2:}
    sampleValue3: ${cust.sample3:`application_yml_3`}
    sampleValue4: ${cust.sample4:`application_yml_4`}
