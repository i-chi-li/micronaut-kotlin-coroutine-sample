plugins {
    id "org.jetbrains.kotlin.jvm" version "1.4.30"
    id "org.jetbrains.kotlin.kapt" version "1.4.30"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.4.30"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
    // IntelliJ IDEA の設定をするためのプラグイン
    id "org.jetbrains.gradle.plugin.idea-ext" version "0.9"
    // Docker イメージ作成用
    id "com.google.cloud.tools.jib" version "2.7.1"
}

version "0.1"
group "micronaut.kotlin.coroutine.sample"

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    // AWS SDK V2
    implementation platform('software.amazon.awssdk:bom:2.15.73')
    // スイッチロール（Assume Role）をしてログインする場合に必要
    implementation "software.amazon.awssdk:sts"
    implementation "software.amazon.awssdk:sqs"
    implementation "software.amazon.awssdk:s3"

    // Micronaut
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"

    // Kotlin Coroutine を利用する場合に追加
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutineVersion}"
    // Kotlin Coroutine を Micronaut から利用する場合に追加
    // Flow で Stream レスポンスを受けるような場合に、このライブラリがないと、以下のようなエラーとなる。
    // ERROR i.m.r.intercept.RecoveryInterceptor - Type [micronaut.kotlin.coroutine.sample.HeadlineClient$Intercepted] executed with error: Cannot convert response publisher to Reactive type (Unsupported Reactive type): interface kotlinx.coroutines.flow.Flow
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-reactive:${coroutineVersion}"

    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    // Endpoint を利用する場合に必要
    implementation "io.micronaut:micronaut-management"
    // Micronaut Cache
    implementation "io.micronaut.cache:micronaut-cache-caffeine"
    // バリデーションを利用する場合に必要
    implementation "io.micronaut:micronaut-validation"
    // バリデーションで、MessageInterpolator を利用する場合に必要
    implementation "io.micronaut.beanvalidation:micronaut-hibernate-validator"
    // Jackson で XML 変換を利用する場合に必要
    implementation "io.micronaut.xml:micronaut-jackson-xml"
    // Security モジュールを利用する場合に必要
    implementation "io.micronaut.security:micronaut-security"
    // Session モジュールを利用する場合に必要（インメモリ版）
    //implementation "io.micronaut:micronaut-session"
    // Security モジュールで、Session モジュールを利用する場合に必要
    //implementation "io.micronaut.security:micronaut-security-session"

    // Time-based One-time Password (TOTP) を扱うライブラリ
    implementation "com.warrenstrange:googleauth:1.5.0"

    kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
    // インジェクションを行うために必要
    kapt "io.micronaut:micronaut-inject-java"
    // コンパイル時にアノテーションをバリデーションするために必要
    kapt "io.micronaut:micronaut-validation"
    // Security モジュールを利用する場合に必要
    kapt "io.micronaut.security:micronaut-security"

    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest "io.micronaut:micronaut-inject-java"

    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin:2.12.1"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"

    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    // Micronaut Kotlin Test
    testImplementation "io.micronaut.test:micronaut-test-kotest"
    // テスト用モック作成用
    testImplementation "io.mockk:mockk:1.10.5"
    // Kotlin Test for JUnit5
    testImplementation "io.kotest:kotest-runner-junit5-jvm"
    // Kotlin Coroutine テストユーティリティ
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutineVersion"
    // Kotlin Coroutine のデバッグ機能を利用する場合に追加
    // ただし、現時点では、JUnit 5 には、対応していないため不採用（JUnit 4 のみ対応している）
    // https://github.com/Kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-debug
    // testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-debug:${coroutineVersion}"
}

// Java ソースの文字コードを指定
[compileJava, compileTestJava]*.options*.encoding = "UTF-8"

test.classpath += configurations.developmentOnly

mainClassName = "micronaut.kotlin.coroutine.sample.Application"

kapt {
    arguments {
        // Micronaut でインクリメンタルアノテーション処理を有効化
        arg("micronaut.processing.incremental", true)
        // アノテーション処理対象クラスを指定する。カンマ区切りで複数指定可能
        arg("micronaut.processing.annotations", "micronaut.kotlin.coroutine.sample.*,foo.bar.*")
    }
}

test {
    useJUnitPlatform()
    // '-Dkotlinx.coroutines.debug' は、スレッド名に Coroutine 名を追加するなど、Coroutine に関するログ出力を強化する
    jvmArgs('-Dkotlinx.coroutines.debug')
}

allOpen {
    // 以下で指定したアノテーションをクラスに付与すると、
    // そのクラスおよび、子クラス自体とすべてのメンバーが、open 定義になる
    // クラスに付与しないと（メソッドのみに付与しても）機能しない。
    annotation("io.micronaut.aop.Around")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        //Will retain parameter names for Java reflection
        javaParameters = true
        // 「@ExperimentalCoroutinesApi」が付与された機能を利用する場合に追加
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
        // 「@ExperimentalCoroutinesApi」が付与された機能を利用する場合に追加
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }
}

shadowJar {
    mergeServiceFiles()
}

jib {
    from {
        image = "amazoncorretto:8"
    }
    container {
        environment = [
            // Docker コンテナでは、LANG 設定を以下のようにしないと文字化けする。
            LANG             : "en_US.UTF-8",
            // jvmFlags で指定したオプションは、上書きできない。
            JAVA_TOOL_OPTIONS: '-Xms64m -Xmx512m',

            "AWS_PROFILE"   : "sandbox",
            "REGION"        : "ap-northeast-1",
            "SQS_QUEUE_NAME": "aaa.fifo",
            "S3_BUCKET_NAME": "sample-bucket-202010121533abc",
            "API_URL"       : "https://httpbin.org/post"

        ]
        // mainClass が未定義の場合は、main 関数を自動的に検索する。
        // ただし、main 関数が複数ある場合は、明示的に指定する必要がある。
        mainClass = mainClassName
        jvmFlags = [
            // 拡張オプション（-XX:...）を利用可能にする設定
            '-XX:+UnlockExperimentalVMOptions',
            // ヒープサイズをメモリサイズではなく CGroup のメモリ制限値を利用する設定
            '-XX:+UseCGroupMemoryLimitForHeap',
            // ロケールのデフォルトを Japan に設定
            '-Duser.language=ja',
            // タイムゾーンのデフォルトを Asia/Tokyo に設定
            '-Duser.timezone=Asia/Tokyo',
            // スレッド名に Coroutine 名を追加するなど、Coroutine に関するログ出力を強化する設定
            '-Dkotlinx.coroutines.debug'
        ]
        ports = ['8080']
    }
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    // '-Dkotlinx.coroutines.debug' は、スレッド名に Coroutine 名を追加するなど、Coroutine に関するログ出力を強化する
    jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote', '-Dkotlinx.coroutines.debug')
    environment += ["JOB_PROCESS_CAPACITY": 10, "JOB_PROCESS_PARALLEL_NUMBER": 4]
    if (project.hasProperty("url")) {
        // -Purl=http://xxxx
        println("url: ${project.url}")
        environment += ["FILTER_PROXY_URL": project.url]
    }
    if (project.hasProperty("port")) {
        println("port: ${project.port}")
        environment += ["MICRONAUT_SERVER_PORT": project.port]
    }
    if (project.hasProperty("profile")
        && project.hasProperty("region")
        && project.hasProperty("sqs")
        && project.hasProperty("bucket")
        && project.hasProperty("api")
    ) {
        println("profile: ${project.profile}")
        println("region: ${project.region}")
        println("sqs: ${project.sqs}")
        println("bucket: ${project.bucket}")
        println("api: ${project.api}")

        environment += [
            "AWS_PROFILE"   : project.profile,
            "REGION"        : project.region,
            "SQS_QUEUE_NAME": project.sqs,
            "S3_BUCKET_NAME": project.bucket,
            "API_URL"       : project.api
        ]
    }
}

task makeToc {
    group "markdown"
    description "Markdown の目次を作成。intoc (https://github.com/stakiran/intoc) のインストールが必要。"
    def targetDir = "docs"
    inputs.dir(targetDir)
    outputs.dir(targetDir)
    doFirst {
        def mdFiles = fileTree(dir: targetDir, include: "**/*.md")
        mdFiles.each { file ->
            exec {
                // 日本語の見出しは、目次のリンクが機能しない場合があるので、テキストのみとする。
                commandLine "intoc", "-input", file, "-edit", "-no-linkformat"
            }
        }
    }
}

// IntelliJ IDEA の設定
import org.jetbrains.gradle.ext.EncodingConfiguration

idea {
    project {
        settings {
            // File -> Settings...(Ctrl + Alt + S) -> Editor -> File Encodings の設定
            encodings {
                // Project Encoding
                encoding = "UTF-8"
                // BOM for new UTF-8 files -> Create new UTF-8 files
                bomPolicy = EncodingConfiguration.BomPolicy.WITH_NO_BOM
                // Properties Files (*.properties)
                properties {
                    // Default encoding for properties files
                    encoding = "UTF-8"
                    // Transparent native-to-ascii conversion
                    transparentNativeToAsciiConversion = true
                    // ファイルまたは、ディレクトリを指定してエンコーディングを設定
                    // ファイル指定の場合は、プロジェクトルートからの相対指定で、ディレクトリ階層も必須。ワイルドカード指定不可
                    // ディレクトリ指定の場合もファイル指定と同様
                    // 存在しないファイルやディレクトリを指定した場合、IntelliJ に反映されない。
                    mapping["gradlew.bat"] = "windows-31j"
                }
            }
        }
    }
}
